import 'dart:typed_data';

enum Action { ENCRYPT, DECRYPT }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –±–ª–æ–∫–∏ –ø–æ 64 –±–∏—Ç–∞ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞ –Ω—É–ª—è–º–∏
List<Uint16List> splitIntoBlocks(Uint16List codePoints) {
  List<Uint16List> blocks = [];
  for (int i = 0; i < codePoints.length; i += 4) {
    Uint16List block = codePoints.sublist(
        i, i + 4 > codePoints.length ? codePoints.length : i + 4);
    if (block.length < 4) {
      block = padWithZeros(block, 4);
    }
    blocks.add(block);
  }
  return blocks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω—É–ª—è–º–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
Uint16List padWithZeros(Uint16List list, int length) {
  Uint16List paddedList = Uint16List(length);
  paddedList.setRange(0, list.length, list);
  return paddedList;
}

// –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É LBC-3 (–º–∞—Å—Å–∏–≤ CharCode, –º–∞—Å—Ç–µ—Ä –∫–ª—é—á)
List<Uint16List> encryptBlocks(
    List<Uint16List> rawBlocks, List<int> generatedKey) {
  //–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
  List<Uint16List> encryptedBlocks = [];
  for (int i = 0; i < rawBlocks.length; i++) {
    //–ü–æ–¥–±–ª–æ–∫ –≤ –∫–æ—Ç–æ—Ä–æ–º 4 –ø–æ 16 –±–∏—Ç. 1 —Å–∏–º–≤–æ–ª = 16 –±–∏—Ç.
    Uint16List encryptedSubBlocks = Uint16List(4);

    //–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è ùëÖùêø(ùëÜ(ùê¥0))
    int rlTemp = 0, rawSubBlock = 0, rawSubBlockAfter_S_transformation = 0;
    for (int j = 0; j < rawBlocks[i].length; j++) {
      rawSubBlock = rawBlocks[i][j];

      //–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ S. subblockAfterSBox - –ø–æ–¥–±–ª–æ–∫ –ø–æ—Å–ª–µ S –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      rawSubBlockAfter_S_transformation =
          transformationS(rawSubBlock, Action.ENCRYPT);

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ RL –∏ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ L
      if (j == 0) {
        // ùëÖùêø(ùëÜ(ùê¥0))
        rlTemp = transformationRL(rawSubBlockAfter_S_transformation);
        // {ùê¥0} = S(A0). –°–¥–≤–∏–≥ –≤–ª–µ–≤–æ –Ω–∞ 1 –ø–æ–¥–±–ª–æ–∫
        encryptedSubBlocks[3] =
            rawSubBlockAfter_S_transformation ^ generatedKey[3];
      } else if (j == 1) {
        // {ùê¥1} = ùëÖùêø(ùëÜ(ùê¥0)) ‚äï ùëÜ(ùê¥1). –°–¥–≤–∏–≥ –≤–ª–µ–≤–æ –Ω–∞ 1 –ø–æ–¥–±–ª–æ–∫.
        encryptedSubBlocks[0] =
            (rawSubBlockAfter_S_transformation ^ rlTemp) ^ generatedKey[0];
      } else
        // {A2} = S(A2),  {A3} = S(A3).–°–¥–≤–∏–≥ –≤–ª–µ–≤–æ –Ω–∞ 1 –ø–æ–¥–±–ª–æ–∫.
        encryptedSubBlocks[j - 1] =
            rawSubBlockAfter_S_transformation ^ generatedKey[j - 1];
    }
    encryptedBlocks.add(encryptedSubBlocks);
  }
  return encryptedBlocks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É LBC-3 (–º–∞—Å—Å–∏–≤ CharCode, –º–∞—Å—Ç–µ—Ä –∫–ª—é—á)
List<Uint16List> decryptBlocks(
    List<Uint16List> blocks, List<int> generatedRoundKey) {
  //–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
  List<Uint16List> decryptedBlocks = [];

  for (int i = 0; i < blocks.length; i++) {
    Uint16List substitutedSubBlock = Uint16List(4);
    int rlTemp = 0;

    for (int j = blocks[i].length - 1; j >= 0; j--) {
      //–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–ª–æ–∂–µ–Ω–∏–µ –ø–æ –º–æ–¥—É–ª—é 2 –º–µ–∂–¥—É –ø–æ–ª—É–±–ª–æ–∫–æ–º –∏ –∫–ª—é—á–æ–º
      int subBlock = blocks[i][j] ^ generatedRoundKey[j];

      if (j == 3) {
        //–î–µ–ª–∞–µ–º —Å–¥–≤–∏–≥ –Ω–∞–ø—Ä–∞–≤–æ, –¥–∞–ª—å—à–µ –¥–µ—à–∏—Ñ—Ä—É–µ–º —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É S-–±–ª–æ–∫
        substitutedSubBlock[0] = transformationS(subBlock, Action.DECRYPT);
        // –ò —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –ø–æ–∑–∏—Ü–∏—è {B3} => {B0}, –Ω–∞—Ö–æ–¥–∏–º RL(B0) –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–∏—Å–∫–∞ {B1} = RL(B0) ^ b1.
        rlTemp = transformationRL(subBlock);
      } else if (j == 0) {
        //–ü—Ä–∏ —Å–¥–≤–∏–≥–µ {B0} => {B1}, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏—â–µ–º RL(B0) ^ B1, –ø–æ—Å–ª–µ –¥–µ—à–∏—Ñ—Ä—É–µ–º —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É S-–±–ª–æ–∫
        substitutedSubBlock[1] =
            transformationS(subBlock ^ rlTemp, Action.DECRYPT);
      } else
        substitutedSubBlock[j + 1] = transformationS(subBlock, Action.DECRYPT);
    }
    decryptedBlocks.add(substitutedSubBlock);
  }
  return decryptedBlocks;
}

//–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ S - –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–ª—É–±–ª–æ–∫, —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞)
int transformationS(int subBlock, Action type) {
  //Nibble = 4 –±–∏—Ç–∞ (–ø–æ–ª—É–±–∞–π—Ç)
  int nibble = 0, subblockAfterSBox = 0;
  for (int k = 12; k >= 0; k -= 4) {
    nibble = (subBlock >> k) & 0xF;
    subblockAfterSBox |=
        ((type == Action.ENCRYPT ? sBox[nibble] : sBoxReversed[nibble]) << k);
  }
  ;
  return subblockAfterSBox;
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ RL - —Ñ—É–Ω–∫—Ü–∏—è, —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—É–±–ª–æ–∫–∞
int transformationRL(int aZero) {
  //–§—É–Ω–∫—Ü–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–¥–≤–∏–≥–∞ (7 –∏ 10)
  int shift7 = rotateLeft(aZero, 7);
  int shift10 = rotateLeft(aZero, 10);
  int result = aZero ^ shift7 ^ shift10;
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–¥–≤–∏–≥–∞ –≤–ª–µ–≤–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
int rotateLeft(int value, int shift) {
  return ((value << shift) | (value >> (16 - shift))) & 0xFFFF;
}

String checkLengthHexMasterKey(String hexMasterKey) {
  if (hexMasterKey.length == 0 || hexMasterKey.isEmpty) {
    throw Exception('–í–≤–µ–¥–∏—Ç–µ 80 –±–∏—Ç–Ω—ã–π –∫–ª—é—á');
  } else if (hexMasterKey.length > 20) {
    throw Exception('–ö–ª—é—á –ø—Ä–µ–≤—ã—à–∞–µ—Ç 80 –±–∏—Ç');
  }
  return hexMasterKey.padLeft(20, '0');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—É–Ω–¥–æ–≤—ã—Ö –∫–ª—é—á–µ–π
List<List<int>> generateRoundKeys(String masterKey, int numRounds) {
  List<int> key = [];

  //–î–µ–ª–µ–Ω–∏–µ HEX –∫–ª—é—á–∞ 80 –±–∏—Ç, –Ω–∞ 5 –ø–æ–¥–±–ª–æ–∫–æ–≤ –ø–æ 16 –±–∏—Ç

  for (int i = 0; i < masterKey.length; i += 4) {
    key.add(int.parse(masterKey.substring(i, i + 4), radix: 16));
  }

  List<List<int>> roundKeys = [];

  for (int round = 1; round <= numRounds; round++) {
    // –≠—Ç–∞–ø 1: –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–±–ª–æ–∫–∞ —Å –ø–æ–º–æ—â—å—é S-–±–ª–æ–∫–∞
    key[0] = sBox[key[0] >> 12] << 12 |
        sBox[(key[0] >> 8) & 0xF] << 8 |
        sBox[(key[0] >> 4) & 0xF] << 4 |
        sBox[key[0] & 0xF];

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã Nr –∫ —á–µ—Ç–≤–µ—Ä—Ç–æ–º—É –ø–æ–¥–±–ª–æ–∫—É
    key[4] = (key[4] + round) & 0xFFFF;

    // –≠—Ç–∞–ø 2: –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ –≤–ª–µ–≤–æ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–±–ª–æ–∫–∞
    key[0] = rotateLeft(key[0], 6);
    key[1] = rotateLeft(key[1], 7);
    key[2] = rotateLeft(key[2], 8);
    key[3] = rotateLeft(key[3], 9);
    key[4] = rotateLeft(key[4], 10);

    // –≠—Ç–∞–ø 3: –°–ª–æ–∂–µ–Ω–∏–µ –ø–æ –º–æ–¥—É–ª—é 2 —Å —Å–æ—Å–µ–¥–Ω–∏–º –ø—Ä–∞–≤—ã–º –ø–æ–¥–±–ª–æ–∫–æ–º
    key[0] ^= key[1];
    key[1] ^= key[2];
    key[2] ^= key[3];
    key[3] ^= key[4];

    // –≠—Ç–∞–ø 4: –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ –≤–ª–µ–≤–æ –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é
    int temp = key[0];
    key[0] = key[1];
    key[1] = key[2];
    key[2] = key[3];
    key[3] = key[4];
    key[4] = temp;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 4 –ø–æ–¥–±–ª–æ–∫–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞—É–Ω–¥–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    roundKeys.add(key.sublist(0, 4));
  }

  return roundKeys;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–±–ª–æ–∫–∞ –Ω–∞ 4 –ø–æ–¥–ø–æ–¥–±–ª–æ–∫–∞ –ø–æ 4 –±–∏—Ç–∞ –∏ –∑–∞–º–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ S-–±–ª–æ–∫—É
List<Uint16List> convertHexStringIntoCharCodeList(String encryptedHex) {
  //–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
  List<Uint16List> decryptedBlocks = [];

  List<String> blocks = [];
  for (int i = 0; i < encryptedHex.length; i += 16) {
    blocks.add(encryptedHex.substring(i, i + 16));
  }

  for (int i = 0; i < blocks.length; i++) {
    Uint16List substitutedSubBlock = Uint16List(4);

    List<String> subBlocks = [
      blocks[i].substring(0, 4),
      blocks[i].substring(4, 8),
      blocks[i].substring(8, 12),
      blocks[i].substring(12, 16)
    ];

    for (int j = subBlocks.length - 1; j >= 0; j--) {
      substitutedSubBlock[j] = hexToInt(subBlocks[j]);
    }
    decryptedBlocks.add(substitutedSubBlock);
  }
  return decryptedBlocks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
int hexToInt(String hex) {
  return int.parse(hex, radix: 16);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–±–ª–æ–∫–∞ –Ω–∞ 4 –ø–æ–¥–ø–æ–¥–±–ª–æ–∫–∞ –ø–æ 4 –±–∏—Ç–∞ –∏ –∑–∞–º–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ S-–±–ª–æ–∫—É
String convertFromCharCodeListIntoHexString(List<Uint16List> rawBlocks) {
  //–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
  List<String> encryptedBlocks = [];

  for (int i = 0; i < rawBlocks.length; i++) {
    //–ü–æ–¥–±–ª–æ–∫ –≤ –∫–æ—Ç–æ—Ä–æ–º 4 –ø–æ 16 –±–∏—Ç. 1 —Å–∏–º–≤–æ–ª = 16 –±–∏—Ç.
    List<String> encryptedSubBlocks = List<String>.filled(4, '');
    for (int j = 0; j < rawBlocks[i].length; j++) {
      encryptedSubBlocks[j] = (toHex(rawBlocks[i][j]));
    }
    encryptedBlocks.add(encryptedSubBlocks.join());
  }
  print(encryptedBlocks);
  return encryptedBlocks.join();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
String toHex(int value) {
  return value.toRadixString(16).padLeft(4, '0');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ charCodes –≤ —Ç–µ–∫—Å—Ç
String convertCharCodeListIntoPlainText(List<Uint16List> uint16Lists) {
  List<int> intList = uint16Lists.expand((list) => list).toList();
  return String.fromCharCodes(intList);
}

//–¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ–Ω—ã
final List<int> sBox = [
  0x9,
  0x2,
  0xA,
  0x4,
  0x0,
  0x6,
  0x7,
  0xD,
  0x5,
  0x1,
  0x8,
  0x3,
  0xE,
  0xF,
  0xB,
  0xC
];

// –û–±—Ä–∞—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ–Ω—ã
final List<int> sBoxReversed = [
  0x4,
  0x9,
  0x1,
  0xB,
  0x3,
  0x8,
  0x5,
  0x6,
  0xA,
  0x0,
  0x2,
  0xE,
  0xF,
  0x7,
  0xC,
  0xD
];
